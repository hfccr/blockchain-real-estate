// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require('Verifier');
const fs = require('fs');
const path = require('path');

contract('TestVerifier', accounts => {
  const account_one = accounts[0];
  const proofPath = path.join(
    path.dirname(path.dirname(__dirname)),
    'zokrates',
    'code',
    'square',
    'proof.json'
  );
  const zocratesProof = JSON.parse(fs.readFileSync(proofPath).toString());
  const { proof, inputs } = zocratesProof;
  const { a, b, c } = proof;

  describe('verifier proof check', () => {
    let verifier;

    beforeEach(async () => {
      verifier = await Verifier.new({ from: account_one });
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('Correct proof verifies transaction', async () => {
      const isValid = await verifier.verifyTx.call(a, b, c, inputs, {
        from: account_one
      });
      assert.equal(isValid, true, 'Correct proof is not valid');
    });

    // Test verification with incorrect proof
    it('Incorrect proof does not verify transaction', async () => {
      const reverseInputs = inputs.map(input => input);
      reverseInputs.reverse();
      const isValid = await verifier.verifyTx.call(a, b, c, reverseInputs, {
        from: account_one
      });
      assert.equal(isValid, false, 'Incorrect proof is valid');
    });
  });
});
